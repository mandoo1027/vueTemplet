import { UnpluginInstance } from 'unplugin';
import { Configuration } from 'webpack';
import { Plugin as Plugin$1 } from 'rollup';
export { Plugin as RollupPlugin } from 'rollup';
import { Plugin as Plugin$2 } from 'vite';
export { Plugin as VitePlugin } from 'vite';
import { Plugin as Plugin$3 } from 'esbuild';
export { Plugin as EsbuildPlugin } from 'esbuild';

type WebpackPlugin = NonNullable<Configuration['plugins']> extends Array<infer T> ? T : never;
interface PluginMap {
    rollup: Plugin$1;
    vite: Plugin$2;
    esbuild: Plugin$3;
    webpack: WebpackPlugin;
}
type PluginType = keyof PluginMap;
type Plugin = PluginMap[PluginType];
type Factory<UserOptions> = (userOptions: UserOptions, meta: {
    framework?: PluginType;
}) => CombineOptions;
type FactoryOutput<UserOptions, Return> = [never] extends UserOptions ? () => Return : undefined extends UserOptions ? (options?: UserOptions) => Return : (options: UserOptions) => Return;
type Unplugin<UserOptions> = {
    instance: UnpluginInstance<UserOptions, boolean> | UnpluginCombineInstance<any>;
    options?: UserOptions;
};
type OptionsPlugin = Plugin | Unplugin<any> | OptionsPlugin[];
interface CombineOptions {
    name: string;
    /** vite only */
    enforce?: 'post' | 'pre' | undefined;
    plugins: OptionsPlugin;
}
interface UnpluginCombineInstance<UserOptions> {
    rollup: FactoryOutput<UserOptions, Plugin$1[]>;
    webpack: FactoryOutput<UserOptions, WebpackPlugin>;
    vite: FactoryOutput<UserOptions, Plugin$2[]>;
    esbuild: FactoryOutput<UserOptions, Plugin$3>;
    raw: Factory<UserOptions>;
    plugins: FactoryOutput<UserOptions, OptionsPlugin>;
}

export { CombineOptions, Factory, FactoryOutput, OptionsPlugin, Plugin, PluginMap, PluginType, Unplugin, UnpluginCombineInstance, WebpackPlugin };
