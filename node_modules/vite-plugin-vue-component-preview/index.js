"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const magic_string_1 = __importDefault(require("magic-string"));
const path = __importStar(require("path"));
const vite_plugin_vue_markdown_1 = __importDefault(require("vite-plugin-vue-markdown"));
function vuePreviewPlugin() {
    const markdown = (0, vite_plugin_vue_markdown_1.default)();
    const previewBlockReg = /\<(preview)[\s\S]*?\>([\s\S]*?)\<\/\1\>/g;
    const fileHash = {};
    let server;
    let currentProxyHotUpdateFile;
    return {
        name: 'vite-plugin-vue-component-preview',
        configureServer(_server) {
            server = _server;
            server.middlewares.use((req, res, next) => {
                if (req.url?.startsWith(server.config.base + '__preview/')) {
                    req.url = server.config.base; // avoid 404
                }
                next();
            });
            server.ws.on('vue-component-preview:hash', (data) => {
                data.file = path.join(server.config.root, data.file);
                if ((fileHash[data.file] ?? '') !== data.text) {
                    fileHash[data.file] = data.text;
                    server.watcher.emit('change', data.file);
                }
            });
        },
        resolveId(id) {
            if (id.startsWith('/__skip_vite/')) {
                // handle for nuxt
                id = path.join(server.config.root, id.substring('/__skip_vite/'.length));
            }
            const cleanId = id.replace(/\?.*$/, '');
            if (cleanId.endsWith('__preview.vue') &&
                !cleanId.startsWith(server.config.root)) {
                id = path.join(server.config.root, id);
            }
            return id;
        },
        load(id) {
            if (id.endsWith('__preview.vue')) {
                const fileName = id.substring(0, id.length - '__preview.vue'.length);
                if (fileHash[fileName]) {
                    return parsePreviewCode(fileHash[fileName]);
                }
                if (fs.existsSync(fileName)) {
                    return parsePreviewCode(fs.readFileSync(fileName, 'utf-8'));
                }
                else {
                    console.warn(`[vite-plugin-vue-component-preview] ${fileName} not found`);
                }
            }
        },
        transform(code, id) {
            let str = new magic_string_1.default(code);
            if (id.endsWith('.vue')) {
                // remove preview block
                if (fileHash[id] && fileHash[id] !== str.toString()) {
                    str = str.overwrite(0, str.length(), fileHash[id].replace(previewBlockReg, ''));
                }
                else {
                    str = str.replaceAll(previewBlockReg, '');
                }
            }
            return {
                code: str.toString(),
                map: str.generateMap(),
            };
        },
        handleHotUpdate(ctx) {
            if (currentProxyHotUpdateFile === undefined && ctx.file.endsWith('.vue')) {
                setTimeout(() => {
                    currentProxyHotUpdateFile = ctx.file;
                    ctx.server.watcher.emit('change', ctx.file);
                }, 100);
            }
            else if (currentProxyHotUpdateFile === ctx.file) {
                currentProxyHotUpdateFile = undefined;
                const originalFile = ctx.file;
                ctx.file = ctx.file + '__preview.vue';
                ctx.modules = [...ctx.server.moduleGraph.getModulesByFile(ctx.file) ?? []];
                const read = ctx.read;
                ctx.read = async () => parsePreviewCode(fileHash[originalFile] || await read());
            }
        },
    };
    async function parsePreviewCode(code) {
        // extract preview block content
        code = code.replace(/<!--[\s\S]*?-->/g, '');
        const previewBlock = code.match(previewBlockReg);
        if (previewBlock) {
            const startTagEnd = previewBlock[0].indexOf('>') + 1;
            const endTagStart = previewBlock[0].lastIndexOf('</');
            code = previewBlock[0].substring(startTagEnd, endTagStart);
            const parsed = await markdown.transform?.call({}, code, '/foo.md');
            if (typeof parsed === 'object' && parsed?.code) {
                code = parsed.code;
            }
            else if (typeof parsed === 'string') {
                code = parsed;
            }
            else {
                code = '<template><slot /></template>';
            }
        }
        else {
            code = '<template><slot /></template>';
        }
        return code;
    }
}
exports.default = vuePreviewPlugin;
;
