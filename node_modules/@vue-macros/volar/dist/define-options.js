// src/define-options.ts
var import_common = require("@vue-macros/common");
var import_language_core = require("@volar/language-core");
var import_muggle_string = require("muggle-string");
function transformDefineOptions({
  codes,
  sfc,
  arg
}) {
  const source = sfc.scriptSetup.content.slice(arg.pos, arg.end);
  const seg = [
    source,
    "scriptSetup",
    arg.pos,
    import_language_core.FileRangeCapabilities.full
  ];
  (0, import_muggle_string.replace)(codes, /setup\(\) {/, "...", seg, ",\nsetup() {");
}
function getArg(ts, sfc) {
  function getCallArg(node) {
    if (!(ts.isCallExpression(node) && ts.isIdentifier(node.expression) && node.expression.text === import_common.DEFINE_OPTIONS))
      return void 0;
    return node.arguments[0];
  }
  const sourceFile = sfc.scriptSetupAst;
  return sourceFile.forEachChild((node) => {
    if (ts.isExpressionStatement(node)) {
      return getCallArg(node.expression);
    } else if (ts.isVariableStatement(node)) {
      return node.declarationList.forEachChild((decl) => {
        if (!ts.isVariableDeclaration(decl) || !decl.initializer)
          return;
        return getCallArg(decl.initializer);
      });
    }
  });
}
var plugin = ({ modules: { typescript: ts } }) => {
  return {
    name: "vue-macros-define-options",
    version: 1,
    resolveEmbeddedFile(fileName, sfc, embeddedFile) {
      if (embeddedFile.kind !== import_language_core.FileKind.TypeScriptHostFile || !sfc.scriptSetup || !sfc.scriptSetupAst)
        return;
      const arg = getArg(ts, sfc);
      if (!arg)
        return;
      transformDefineOptions({
        codes: embeddedFile.content,
        sfc,
        arg
      });
    }
  };
};
module.exports = plugin;
