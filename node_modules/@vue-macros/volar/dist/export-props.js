// src/export-props.ts
var import_language_core = require("@volar/language-core");
var import_muggle_string2 = require("muggle-string");

// src/common.ts
var import_muggle_string = require("muggle-string");
function getVueLibraryName(vueVersion) {
  return vueVersion < 2.7 ? "@vue/runtime-dom" : "vue";
}
function addProps(content, decl, vueLibName) {
  (0, import_muggle_string.replace)(
    content,
    /setup\(\) {/,
    "props: ({} as ",
    ...decl,
    "),\n",
    "setup() {"
  );
  content.push(
    `type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
`,
    `type __VLS_TypePropsToRuntimeProps<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? { type: import('${vueLibName}').PropType<__VLS_NonUndefinedable<T[K]>> } : { type: import('${vueLibName}').PropType<T[K]>, required: true } };
`
  );
  return true;
}

// src/export-props.ts
function transform({
  file,
  sfc,
  ts,
  vueLibName
}) {
  var _a;
  const props = {};
  let changed = false;
  for (const stmt of sfc.scriptSetupAst.statements) {
    if (!ts.isVariableStatement(stmt))
      continue;
    const exportModifier = (_a = stmt.modifiers) == null ? void 0 : _a.find(
      (m) => m.kind === ts.SyntaxKind.ExportKeyword
    );
    if (!exportModifier)
      continue;
    const start = exportModifier.getStart(sfc.scriptSetupAst);
    const end = exportModifier.getEnd();
    (0, import_muggle_string2.replaceSourceRange)(file.content, "scriptSetup", start, end);
    changed = true;
    for (const decl of stmt.declarationList.declarations) {
      if (!ts.isIdentifier(decl.name))
        continue;
      props[decl.name.text] = !!decl.initializer;
    }
  }
  if (changed) {
    addProps(
      file.content,
      [
        `__VLS_TypePropsToRuntimeProps<{
${Object.entries(props).map(([prop, optional]) => `  ${prop}${optional ? "?" : ""}: typeof ${prop}`).join(",\n")}
  }>`
      ],
      vueLibName
    );
  }
}
var plugin = ({
  modules: { typescript: ts },
  vueCompilerOptions
}) => {
  return {
    name: "vue-macros-export-props",
    version: 1,
    resolveEmbeddedFile(fileName, sfc, embeddedFile) {
      if (embeddedFile.kind !== import_language_core.FileKind.TypeScriptHostFile || !sfc.scriptSetup || !sfc.scriptSetupAst)
        return;
      const vueLibName = getVueLibraryName(vueCompilerOptions.target);
      transform({
        file: embeddedFile,
        sfc,
        vueLibName,
        ts
      });
    }
  };
};
module.exports = plugin;
