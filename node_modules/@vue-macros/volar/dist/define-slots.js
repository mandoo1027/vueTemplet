// src/define-slots.ts
var import_language_core = require("@volar/language-core");
var import_common = require("@vue-macros/common");
var import_muggle_string = require("muggle-string");
var transform = ({
  embeddedFile,
  typeArg,
  sfc
}) => {
  if (embeddedFile.kind !== import_language_core.FileKind.TypeScriptHostFile)
    return;
  const textContent = (0, import_muggle_string.toString)(embeddedFile.content);
  if (!textContent.includes(import_common.DEFINE_SLOTS) || !textContent.includes("return __VLS_slots"))
    return;
  (0, import_muggle_string.replace)(
    embeddedFile.content,
    "return __VLS_slots",
    `return __VLS_slots as __VLS_DefineSlots<`,
    () => [
      // slots type
      sfc.scriptSetup.content.slice(typeArg.pos, typeArg.end),
      "scriptSetup",
      typeArg.pos,
      import_language_core.FileRangeCapabilities.full
    ],
    ">"
  );
  embeddedFile.content.push(
    `type __VLS_DefineSlots<T> = { [SlotName in keyof T]: (_: T[SlotName]) => any }`
  );
};
function getTypeArg(ts, sfc) {
  function getCallArg(node) {
    var _a;
    if (!(ts.isCallExpression(node) && ts.isIdentifier(node.expression) && node.expression.text === import_common.DEFINE_SLOTS && ((_a = node.typeArguments) == null ? void 0 : _a.length) === 1))
      return void 0;
    return node.typeArguments[0];
  }
  const sourceFile = sfc.scriptSetupAst;
  return sourceFile == null ? void 0 : sourceFile.forEachChild((node) => {
    if (!ts.isExpressionStatement(node))
      return;
    return getCallArg(node.expression);
  });
}
var plugin = ({ modules: { typescript: ts } }) => {
  return {
    name: "vue-macros-short-vmodel",
    version: 1,
    resolveEmbeddedFile(fileName, sfc, embeddedFile) {
      const typeArg = getTypeArg(ts, sfc);
      if (!typeArg)
        return;
      transform({
        embeddedFile,
        typeArg,
        sfc
      });
    }
  };
};
module.exports = plugin;
